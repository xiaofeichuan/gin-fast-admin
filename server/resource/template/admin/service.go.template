package service

type {{.ModelName}}Service struct{}

// Page {{.FunctionName}}分页查询
func ({{.ModuleName}}Service *{{.ModelName}}Service) Page(query dto.{{.ModelName}}Query) (list []dto.{{.ModelName}}Vo, total int64, err error) {
	db := global.DB.Model(&model.{{.ModelName}}{})

	//查询条件
	{{- range $index, $item := .ColumnList }}
		{{- if $item.IsQuery  }}
	if query.{{$item.CodeField}}  != "" {
		db = db.Where("`{{$item.ColumnName}} ` LIKE ?", "%"+query.{{$item.CodeField}} +"%")
	}
		{{- end }}
	{{- end }}

	offset := (query.PageIndex - 1) * query.PageSize

	//查询数据
	err = db.Order("id DESC").Offset(offset).Limit(query.PageSize).Find(&list).Error
	if err != nil {
		return nil, 0, err
	}

	//总条数
	db.Count(&total)
	return list, total, err
}

// Add 添加{{.FunctionName}}
func ({{.ModuleName}}Service *{{.ModelName}}Service) Add(addDto dto.{{.ModelName}}AddDto) error {
	var user = &model.{{.ModelName}}{
		{{- range $index, $item := .ColumnList -}}
			{{- if $item.IsEdit  }}
		{{$item.CodeField}} :  addDto.{{$item.CodeField}}
			{{- end }}
		{{- end }}
	}
	err := global.DB.Create(user).Error
	return err
}

// Update 更新{{.FunctionName}}
func ({{.ModuleName}}Service *{{.ModelName}}Service) Update(updateDto dto.{{.ModelName}}UpdateDto) error {
	var user = &model.{{.ModelName}}{
		Id:       updateDto.Id,
		{{- range $index, $item := .ColumnList -}}

			{{- if $item.IsEdit  }}
		{{$item.CodeField}} :  updateDto.{{$item.CodeField}}
			{{- end }}
		{{- end }}
	}
	err := global.DB.Updates(user).Error
	return err
}

// Delete 删除{{.FunctionName}}
func ({{.ModuleName}}Service *{{.ModelName}}Service) Delete(id int64) error {
	err := global.DB.Delete(&model.{{.ModelName}}{}, "id = ?", id).Error
	return err
}


// Detail {{.FunctionName}}详情
func ({{.ModuleName}}Service *{{.ModelName}}Service) Detail(id int64) (obj dto.{{.ModelName}}Vo, err error) {
	err = global.DB.Model(&model.{{.ModelName}}{}).Where("id = ?", id).Scan(&obj).Error
	return obj, err
}

// List {{.FunctionName}}列表
func ({{.ModuleName}}Service *{{.ModelName}}Service) List() (objs []dto.{{.ModelName}}Vo, err error) {
	err = global.DB.Model(&model.{{.ModelName}}{}).Scan(&objs).Error
	return objs, err
}